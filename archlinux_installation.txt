ARCHLINUX INSTALL PROCEDURE FOR UEFI SYSTEMS

1) Verify the boot mode

   # ls /sys/firmware/efi/efivars

   If you get a bunch of lines, all is well.

2) Checking internet connection

   # ping -c 5 archlinux.org

   It will only ping 5 times.

3) Updating the system clock

   # timedatectl set-ntp true

   We tell our computer to sync the date and time. At this point we do NOT say what timezone we are in.

4) Partitioning the disks

   # lsblk

   Check your system's partition layout BEFORE INSTALLING.

   # cfdisk

   Here you do the necessary partitioning.

   /boot partition		- 512M				 - sda10	 - EFI System
   SWAP partition		- 2G				 - sda11  - Linux swap
   / (Root) partition 	- Rest of the system - sda12 - Linux filesystem

   Do the partitioning and write it. Check your partitioning again using #lsblk.

5) Formatting the partitions

   Format the EFI partition.
   # mkfs.fat -F32 /dev/sda8

   Format the swap partition and activate it.
   # mkswap /dev/sda9
   # swapon /dev/sda9

   Format the root partition
   # mkfs.ext4 /dev/sda10

6) Mounting the File Systems

   We need to mount our created partitions into our linux hierarchy. First we need to mount the root partition into /mnt. Then we create /mnt/boot in which we mount the boot partition.
   # mount /dev/sda10 /mnt
   # mkdir /mnt/boot
   # mount /dev/sda8 /mnt/boot

7) Install essential packages using pacstrap

   # pacstrap /mnt base base-devel linux-lts linux-lts-headers linux-firmware nano vim bash-completion intel-ucode

8) FSTAB

   We generate a fstab (File System Table) file so linux will know what partitions we have like swap, boot and root.

   # genfstab -U /mnt >> /mnt/etc/fstab

   You should have the partitions as you have configured when you open the file with
   # vim /mnt/etc/fstab

9) CHROOT

   Moving inside the future linux system and changing elements there.
   # arch-chroot /mnt

10) Time Zone

    # ln -sf /usr/share/zoneinfo/Asia/Kolkata /etc/localtime

    # hwclock --systohc

11) Localization

    # vim /etc/locale.gen

    Uncomment the language en_IN UTF-8 and save it. Now generate the locale.
    # locale-gen

    Also set the variable LANG or language to reflect the same choice.
    # echo LANG=en_IN.UTF-8 > /etc/locale.conf

12) Hostname

    echo MyHostname > /etc/hostname

    # vim /etc/hosts

    Type the following in the file and save it.

    127.0.0.1   localhost
    ::1         localhost
    127.0.1.1   MyHostname.localdomain  MyHostname

13) Network Configuration

    # pacman -S networkmanager
    # systemctl enable NetworkManager

    NetworkManager is case sensitive. You will get 3 symlink lines as a result.

14) Root Password

    # passwd

15) Boot loader (GRUB)

    # pacman -S grub efibootmgr os-prober ntfs-3g
    # grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB
    # grub-mkconfig -o /boot/grub/grub.cfg

16) Unmount disks and Reboot

    Exit the chroot and unmount all disks and reboot.

    # exit
    $ umount -a
    $ reboot

    Login to the new system with the root account. Username:root and Password: whatever you specified

17) Adding User

    Create 'darshan' user with sudo access.
    # useradd darshan
    # passwd darshan
    
    Add 'darshan' to the wheel group using usermod command.

    # usermod -aG wheel darshan
    
    Then you have to run visudo as root with vim as the editor specified explicitly to edit the /etc/sudoers file.

    # EDITOR=vim visudo

    Uncomment the line containing wheel group. It is the line which begins with wheel and save it.
			%wheel        ALL=(ALL)       ALL

	[OPTIONAL]
	Okay so now you can test whether you really have sudo power.
    17.1) Use the su to switch to the new user account that you created.
            # su darshan

    17.2) Use the groups to verify that the user is in the wheel group.
            $ groups
            darshan wheel

    17.3) Use the sudo command to run the whoami command.
            $ sudo whoami
            root

18) Include the 'multilib' repository and enable "ParallelDownloads"

    # vim /etc/pacman.conf

    Uncomment the below line to enable parallel downloads.
        ParallelDownloads = 5

    Uncomment the below two lines to include the multilib repository and save it.
		[multilib]
        include = /etc/pacman.d/mirrorlist

19) Update and sync the repositories once before going any furthur.

    # pacman -Syyu

20) Installation of X Server(XORG), Desktop Environment(DE), Login Display Manager(DM)

    Before installing a DE, you will need to install the X Server first. Once it is completed, install DE.
	# pacman -S xorg

    I prefer the MATE Desktop Environment.
	# pacman -S mate mate-extra

    You will also need a display manager to log in to your desktop environment. For the ease, you can install LXDM.
    # pacman -S lxdm

    Once installed, you can enable LXDM to start each time you reboot your system.
    # systemctl enable lxdm.service

21) Installing my required packages
        pacman-contrib
        p7zip
        unrar
        zip
        unzip
        gvfs
        gvfs-mtp (For Android File Transfer)
        youtube-dl
        vlc
        libreoffice-fresh
        firefox
        htop
        neofetch
        gdb
        geany
        bleachbit
        ranger
        git
        curl
        wget
        gvim (for +clipboard support for copy pasting between system clipboard and vim buffers)
        qbittorrent
        xfce4-terminal
        keepassxc
        gimp
        rofi
        openssh

22) Getting Wi-Fi connection

    My machine has the Broadcom BCM 43142 driver for Wifi. Figure out the wifi driver that your machine uses. Broadcom BCM 43142 requires broadcom-wl-dkms package.

    # pacman -S broadcom-wl-dkms

    To load the new module, run the following commands as root:
    # rmmod b43 b43legacy bcm43xx bcma brcm80211 brcmfmac brcmsmac ssb tg3 wl
    # modprobe wl

    Update the dependencies using depmod
	# depmod -a

    Also, install Network Manager Applet to get the Wifi icon applet. And install nm-connection-editor for managing frontend of NetworkManager connections.
    # pacman -S network-manager-applet nm-connection-editor

23) Reboot the system. The LXDM login manager and MATE DE along with the Wifi will work after rebooting the system.

    # reboot

24) Get the Sound working on your system

    $ sudo pacman -S pulseaudio pulseaudio-alsa pavucontrol alsa-utils alsa-plugins alsa-lib alsa-firmware gstreamer volumeicon

    $ alsamixer

    Press M and unmute the channels and keep increasing the volume levels on all channels to your likings. Check the sound systems.

25) Getting OS_PROBER to detect other Operating Systems

	We have to enable os_prober to detect other operating systems present on your system. Also I have configured GRUB to remember your previously booted system. This is better and more convinient.

    # vim /etc/default/grub

    And uncomment or add the below three lines.
        GRUB_DISABLE_OS_PROBER=false
        GRUB_DEFAULT=saved
        GRUB_SAVEDEFAULT=true

    Regenerate the GRUB configuration file again.
    # grub-mkconfig -o /boot/grub/grub.cfg
    
26) Install tlp and other Power Management tools
    $ sudo pacman -S tlp x86_energy_perf_policy

    $ sudo tlp-stat

    Enable the tlp services.
    $ sudo systemctl enable tlp.service
    $ sudo systemctl mask systemd-rfkill.service
    $ sudo systemctl mask systemd-rfkill.socket

27) Use all cores for compiling.

	Go to /etc/makepkg.conf file. Search for "MAKEFLAGS". Replace the "-j2" with "-j$(nproc)" and uncomment that line.

	$ sudo vim /etc/makepkg.conf

	This uses all cores when compiling now.

28) Pacman hooks to clean package cache and to deal with .pacnew files
    
    Uncomment the HookDir line in pacman.conf file.
    $ sudo vim /etc/pacman.conf

    And uncomment the HookDir line.

        $ sudo mkdir /etc/pacman.d/hooks

        Create a file /etc/pacman.d/hooks/clean_package_cache.hook

        $ sudo vim /etc/pacman.d/hooks/clean_package_cache.hook

        Add the following lines:

                        [Trigger]
                        Operation = Upgrade
                        Operation = Install
                        Operation = Remove
                        Type = Package
                        Target = *
                        [Action]
                        Description = CLEANING PACMAN CACHE...
                        When = PostTransaction
                        Exec = /usr/bin/paccache -r

        Now, create a hook to deal with .pacnew files as well.

        $ sudo vim /etc/pacman.d/hooks/pacdiff.hook

        Add the following lines:

                        [Trigger]
                        Operation = Install
                        Operation = Upgrade
                        Operation = Remove
                        Type = Package
                        Target = *
                        [Action]
                        Description = CHECKING FOR PACNEW FILES...
                        When = PostTransaction
                        Exec = /usr/bin/pacdiff

29) Journal Size Limit

        The maximum size of the persistent journal can be controlled by uncommenting and changing the following:

        $ sudo vim /etc/systemd/journald.conf

			SystemMaxUse=50M

        Restart the systemd-journald.service after changing this setting to apply the new limit.

        $ sudo systemctl restart systemd-journald.service

30) Install AUR helper like yay.

	Download the PKGBUILD of yay from https://aur.archlinux.org/packages/yay/ .

	Install pamac-aur, google-chrome, brave-bin, downgrade, mate-tweak and other packages you want from AUR.

31) Configure the keyboard shortcuts in the DE and change the DE settings.

32) Update and reboot.
